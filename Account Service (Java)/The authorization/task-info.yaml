type: edu
files:
- name: src/account/AccountServiceApplication.java
  visible: true
  text: |-
    package account;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class AccountServiceApplication {

        public static void main(String[] args) {
            SpringApplication.run(AccountServiceApplication.class, args);
        }

    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852

    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
    spring.jackson.serialization.INDENT_OUTPUT=true
    server.error.include-message=always
    server.error.include-binding-errors=always

    spring.datasource.url=jdbc:h2:file:../service_db
    spring.datasource.driverClassName=org.h2.Driver
    #spring.datasource.username=sa
    #spring.datasource.password=sa

    spring.datasource.testWhileIdle=true
    spring.datasource.test-on-borrow=true

    spring.jpa.defer-datasource-initialization=true
    spring.jpa.hibernate.ddl-auto=update
    spring.jpa.show-sql=true
    spring.jpa.properties.hibernate.format_sql=true
    spring.jpa.open-in-view=false

    spring.jpa.properties.hibernate.globally_quoted_identifiers=true
  learner_created: false
- name: build.gradle
  visible: true
  text: |
    buildscript {
        apply plugin: 'hyperskill'

        repositories {
            mavenCentral()
        }

    /*    dependencies {
            classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
            classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
        }*/
    }
    plugins {
        id 'java'
        id 'org.springframework.boot' version '3.1.1'
        id 'io.spring.dependency-management' version '1.1.0'
    }

    //apply plugin: 'java'
    //apply plugin: 'org.springframework.boot'
    //apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-security'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        implementation 'com.h2database:h2'
        implementation group: 'org.hibernate', name: 'hibernate-validator', version: '8.0.0.Final'

        compileOnly 'org.projectlombok:lombok:1.18.20'
        annotationProcessor 'org.projectlombok:lombok:1.18.20'
        testCompileOnly 'org.projectlombok:lombok:1.18.20'
        testAnnotationProcessor 'org.projectlombok:lombok:1.18.20'

    }
  learner_created: false
- name: src/account/config/WebSecurityConfig.java
  visible: true
  text: |-
    package account.config;

    import account.service.UserDetailsServiceImpl;
    import lombok.RequiredArgsConstructor;
    import org.springframework.context.annotation.Bean;
    import org.springframework.context.annotation.Configuration;
    import org.springframework.http.HttpMethod;
    import org.springframework.security.authentication.AuthenticationManager;
    import org.springframework.security.authentication.AuthenticationProvider;
    import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
    import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
    import org.springframework.security.config.annotation.web.builders.HttpSecurity;
    import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;
    import org.springframework.security.config.http.SessionCreationPolicy;
    import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
    import org.springframework.security.crypto.password.PasswordEncoder;
    import org.springframework.security.web.SecurityFilterChain;

    @Configuration
    @RequiredArgsConstructor
    public class WebSecurityConfig {
        private final UserDetailsServiceImpl userDetailsService;
        private final RestAuthenticationEntryPoint restAuthenticationEntryPoint;

        @Bean
        public BCryptPasswordEncoder passwordEncoder() {
            return new BCryptPasswordEncoder(13);
        }

        @Bean
        public AuthenticationManager authenticationManagerBean(HttpSecurity http) throws Exception {
            AuthenticationManagerBuilder authenticationManagerBuilder = http.getSharedObject(AuthenticationManagerBuilder.class);
            authenticationManagerBuilder.userDetailsService(userDetailsService).passwordEncoder(passwordEncoder());
            return authenticationManagerBuilder.build();
        }

        @Bean
        public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
            http
                    .httpBasic((httpBasic) -> httpBasic
                            .authenticationEntryPoint(restAuthenticationEntryPoint)
                    )
                    .cors(AbstractHttpConfigurer::disable)
                    .csrf(AbstractHttpConfigurer::disable)
                    .authorizeHttpRequests((authz) -> authz
                            .requestMatchers(HttpMethod.POST, "/api/auth/signup/**").permitAll()
                            .requestMatchers(HttpMethod.GET, "/api/auth/test/**").permitAll()
                            .requestMatchers("/actuator/**").permitAll()
                            .requestMatchers(HttpMethod.POST, "/api/auth/changepass/**").authenticated()
                            .requestMatchers(HttpMethod.GET, "/api/empl/payment/**").hasAnyRole("USER", "ACCOUNTANT")
                            .requestMatchers(HttpMethod.POST, "/api/acct/payments/**").permitAll()//.hasRole("ACCOUNTANT")
                            .requestMatchers(HttpMethod.PUT, "/api/acct/payments/**").permitAll()//.hasRole("ACCOUNTANT")
                            .requestMatchers(HttpMethod.GET, "/api/admin/user/**").hasRole("ADMIN")
                            .requestMatchers(HttpMethod.DELETE, "/api/admin/user/**").hasRole("ADMIN")
                            .requestMatchers(HttpMethod.PUT, "/api/admin/user/role/**").hasRole("ADMIN")
                            .anyRequest().authenticated()
                    )
                    .sessionManagement((session) -> session
                            .sessionCreationPolicy(SessionCreationPolicy.STATELESS) // no session
                    );
            return http.build();
        }
    }
  learner_created: false
- name: src/account/DTO/SignupRequest.java
  visible: true
  text: |
    package account.DTO;

    import jakarta.validation.constraints.NotBlank;
    import jakarta.validation.constraints.NotNull;
    import lombok.Getter;
    import lombok.NoArgsConstructor;
    import lombok.Setter;

    @Getter
    @Setter
    @NoArgsConstructor
    public class SignupRequest {
        @NotBlank
        private String name;
        @NotBlank
        private String lastname;
        @NotNull
        private String email;
        @NotNull
        private String password;

    }
  learner_created: false
- name: src/account/controller/AuthController.java
  visible: true
  text: |
    package account.controller;

    import account.DTO.ChangePasswordRequest;
    import account.DTO.ChangePasswordResponse;
    import account.DTO.SignupRequest;
    import account.DTO.SignupResponse;
    import account.config.MyException;
    import account.model.User;
    import account.model.User;
    import account.repository.UserRepository;
    import jakarta.validation.Valid;
    import lombok.RequiredArgsConstructor;
    import lombok.extern.slf4j.Slf4j;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.security.core.annotation.AuthenticationPrincipal;
    import org.springframework.security.core.userdetails.UserDetails;
    import org.springframework.security.crypto.password.PasswordEncoder;
    import org.springframework.web.bind.annotation.GetMapping;
    import org.springframework.web.bind.annotation.PostMapping;
    import org.springframework.web.bind.annotation.RequestBody;
    import org.springframework.web.bind.annotation.RestController;

    import java.util.Arrays;
    import java.util.List;

    @Slf4j
    @RestController
    @RequiredArgsConstructor
    public class AuthController {
        private final List<String> breachedPasswords = Arrays.asList("PasswordForJanuary", "PasswordForFebruary", "PasswordForMarch", "PasswordForApril",
                "PasswordForMay", "PasswordForJune", "PasswordForJuly", "PasswordForAugust",
                "PasswordForSeptember", "PasswordForOctober", "PasswordForNovember", "PasswordForDecember");

        private final PasswordEncoder encoder;
        private final UserRepository userRepository;

        @PostMapping("/api/auth/signup")
        public ResponseEntity<SignupResponse> signup(
                @RequestBody @Valid SignupRequest request) throws MyException {

            if(!isCorrectPassword(request.getPassword()))
                throw new MyException(HttpStatus.BAD_REQUEST, "The password length must be at least 12 chars!");
            if(isPasswordBreached(request.getPassword()))
                throw new MyException(HttpStatus.BAD_REQUEST, "The password is in the hacker's database!");

            if(!isCorrectEmail(request.getEmail()))
                throw new MyException(HttpStatus.BAD_REQUEST, "Incorrect email");
            if (userRepository.findByEmailIgnoreCase(request.getEmail()).isPresent())
                throw new MyException(HttpStatus.BAD_REQUEST, "User exist!");

            request.setEmail(request.getEmail().toLowerCase());
            request.setPassword(encoder.encode(request.getPassword()));
            User user = new User(request);
            user = userRepository.save(user);

            return ResponseEntity.status(HttpStatus.OK).body(new SignupResponse(user));

        }

        private boolean isPasswordBreached(String password) {
            return breachedPasswords.contains(password);
        }

        private boolean isCorrectPassword(String password) {
            return password.length() >= 12;
        }

        private boolean isCorrectEmail(String email) {
            String emailRegexp = "[\\w.-]+@acme\\.com";
            return email.matches(emailRegexp);
        }

        @PostMapping("/api/auth/changepass")
        public ResponseEntity<ChangePasswordResponse> changePassword(
                @RequestBody @Valid ChangePasswordRequest request,
                @AuthenticationPrincipal UserDetails principal) throws MyException {

            if(!isCorrectPassword(request.getNew_password()))
                throw new MyException(HttpStatus.BAD_REQUEST, "Password length must be 12 chars minimum!");
            if(isPasswordBreached(request.getNew_password()))
                throw new MyException(HttpStatus.BAD_REQUEST, "The password is in the hacker's database!");

            User user = userRepository.findByEmailIgnoreCase(principal.getUsername()).orElseThrow();

            if (encoder.matches(request.getNew_password(), user.getPassword()))
                throw new MyException(HttpStatus.BAD_REQUEST, "The passwords must be different!");

            user.setPassword(encoder.encode(request.getNew_password()));
            user = userRepository.save(user);

            return ResponseEntity.status(HttpStatus.OK).body(new ChangePasswordResponse(user.getEmail()));
        }

        @GetMapping("/api/auth/test")
        public ResponseEntity<List<User>> test() {
            log.info("Entering test endpoint");
    //        Authentication auth = SecurityContextHolder.getContext().getAuthentication();
    //        log.info(auth.getName());
            return ResponseEntity.status(HttpStatus.OK).body(userRepository.findAll());
        }
    }
  learner_created: false
- name: src/account/DTO/SignupResponse.java
  visible: true
  text: |
    package account.DTO;

    import account.model.User;
    import lombok.Getter;
    import lombok.NoArgsConstructor;
    import lombok.Setter;

    @Getter
    @Setter
    @NoArgsConstructor
    public class SignupResponse {
        private long id;
        private String name;
        private String lastname;
        private String email;

        public SignupResponse(User user) {
            this.id = user.getId();
            this.name = user.getName();
            this.lastname = user.getLastname();
            this.email = user.getEmail();
        }
    }
  learner_created: false
- name: src/account/service/UserDetailsServiceImpl.java
  visible: true
  text: |
    package account.service;

    import account.repository.UserRepository;
    import lombok.RequiredArgsConstructor;
    import org.springframework.security.core.userdetails.UserDetails;
    import org.springframework.security.core.userdetails.UserDetailsService;
    import org.springframework.security.core.userdetails.UsernameNotFoundException;
    import org.springframework.stereotype.Service;

    @Service
    @RequiredArgsConstructor
    public class UserDetailsServiceImpl implements UserDetailsService {
        private final UserRepository userRepository;
        @Override
        public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
            return userRepository.findByEmailIgnoreCase(username).orElseThrow();
        }
    }
  learner_created: false
- name: src/account/model/User.java
  visible: true
  text: |
    package account.model;

    import account.DTO.SignupRequest;
    import jakarta.persistence.*;
    import lombok.Data;
    import lombok.NoArgsConstructor;
    import org.springframework.security.core.GrantedAuthority;
    import org.springframework.security.core.authority.SimpleGrantedAuthority;
    import org.springframework.security.core.userdetails.UserDetails;

    import java.util.*;

    @Data
    @Entity
    @NoArgsConstructor
    @Table(name = "employee")
    public class User implements UserDetails {
        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        private Long id;

        private String name;
        private String lastname;
        private String email;
        private String password;

        private String role;

        @OneToMany(mappedBy = "user", fetch = FetchType.LAZY)
        private List<Salary> salaries;

        public User(SignupRequest request) {
            this.name = request.getName();
            this.lastname = request.getLastname();
            this.email = request.getEmail();
            this.password = request.getPassword();
            this.role = "USER";
        }
        @Override
        public Collection<? extends GrantedAuthority> getAuthorities() {
            return Arrays.asList(new SimpleGrantedAuthority("ROLE_" + role));
        }

        @Override
        public String getPassword() {
            return password;
        }

        @Override
        public String getUsername() {
            return email;
        }

        @Override
        public boolean isAccountNonExpired() {
            return true;
        }

        @Override
        public boolean isAccountNonLocked() {
            return true;
        }

        @Override
        public boolean isCredentialsNonExpired() {
            return true;
        }

        @Override
        public boolean isEnabled() {
            return true;
        }
    }
  learner_created: false
- name: src/account/DTO/FailedSignupResponse.java
  visible: true
  text: |
    package account.DTO;

    import lombok.AllArgsConstructor;
    import lombok.Getter;
    import lombok.NoArgsConstructor;
    import lombok.Setter;

    import java.time.Instant;

    @Getter
    @Setter
    @NoArgsConstructor
    @AllArgsConstructor
    public class FailedSignupResponse {
        Instant timestamp;
        int status;
        String error;
        String message;
        String path;
    }
  learner_created: false
- name: src/account/config/ExceptionResponseHandler.java
  visible: true
  text: |
    package account.config;

    import account.DTO.FailedSignupResponse;
    import org.springframework.http.HttpHeaders;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.ControllerAdvice;
    import org.springframework.web.bind.annotation.ExceptionHandler;
    import org.springframework.web.context.request.ServletWebRequest;
    import org.springframework.web.context.request.WebRequest;
    import org.springframework.web.server.ResponseStatusException;

    import java.time.Instant;

    @ControllerAdvice
    public class ExceptionResponseHandler {

    /*    @ExceptionHandler(value = ResponseStatusException.class)
        ResponseEntity<FailedSignupResponse> handleResponseStatusException(
                ResponseStatusException ex, WebRequest request
        ) {
            Instant timestamp = Instant.now();
            String path = ((ServletWebRequest) request).getRequest().getRequestURI();
            return ResponseEntity
                    .status(ex.getStatusCode())
                    .body(new FailedSignupResponse(timestamp, ex.getStatusCode().value(), "Bad Request", ex.getMessage(), path));
        }*/

        @ExceptionHandler(value = MyException.class)
        ResponseEntity<FailedSignupResponse> handleResponseStatusException(
                MyException ex, WebRequest request
        ) {
            Instant timestamp = Instant.now();
            String path = ((ServletWebRequest) request).getRequest().getRequestURI();
            return ResponseEntity
                    .status(ex.getStatus())
                    .body(new FailedSignupResponse(timestamp, ex.getStatus().value(), "Bad Request", ex.getMessage(), path));
        }

        /**
         * handlerOtherExceptions handles any unhandled exceptions.
         */
        @ExceptionHandler(value = Exception.class)
        ResponseEntity<Object> handleOtherExceptions(Exception ex, WebRequest request) {
            String requestUri = ((ServletWebRequest) request).getRequest().getRequestURI();
            ExceptionMessage exceptionMessage = new ExceptionMessage(ex.getMessage(), requestUri);
            HttpHeaders headers = new HttpHeaders();
            headers.setAccessControlAllowOrigin("*");
            return new ResponseEntity<Object>(exceptionMessage, headers, HttpStatus.BAD_REQUEST);
        }
    }
  learner_created: false
- name: src/account/config/ExceptionMessage.java
  visible: true
  text: |
    package account.config;

    import lombok.AllArgsConstructor;
    import lombok.Data;

    @Data
    @AllArgsConstructor
    public class ExceptionMessage {
        String message;
        String path;
    }
  learner_created: false
- name: src/account/config/RestAuthenticationEntryPoint.java
  visible: true
  text: |-
    package account.config;

    import jakarta.servlet.http.HttpServletRequest;
    import jakarta.servlet.http.HttpServletResponse;
    import org.springframework.security.core.AuthenticationException;
    import org.springframework.security.web.AuthenticationEntryPoint;
    import org.springframework.stereotype.Component;

    import java.io.IOException;

    // Handles auth error
    @Component
    public class RestAuthenticationEntryPoint implements AuthenticationEntryPoint {

        @Override
        public void commence(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException) throws IOException {
            response.sendError(HttpServletResponse.SC_UNAUTHORIZED, authException.getMessage());
        }
    }
  learner_created: false
- name: src/account/repository/UserRepository.java
  visible: true
  text: |
    package account.repository;

    import account.model.User;
    import org.springframework.data.repository.CrudRepository;
    import org.springframework.stereotype.Repository;

    import java.util.List;
    import java.util.Optional;

    @Repository
    public interface UserRepository extends CrudRepository<User, Long> {
        Optional<User> findByEmailIgnoreCase(String username);
        List<User> findAll();
    }
  learner_created: false
- name: src/account/DTO/ChangePasswordRequest.java
  visible: true
  text: |
    package account.DTO;

    import jakarta.validation.constraints.NotNull;
    import lombok.Data;

    @Data
    public class ChangePasswordRequest {
        @NotNull
        private String new_password;
    }
  learner_created: false
- name: src/account/config/MyException.java
  visible: true
  text: |
    package account.config;

    import lombok.AllArgsConstructor;
    import lombok.Data;
    import org.springframework.http.HttpStatus;

    @Data
    @AllArgsConstructor
    public class MyException extends Exception {
        private HttpStatus status;
        private String message;
    }
  learner_created: false
- name: src/account/DTO/ChangePasswordResponse.java
  visible: true
  text: |
    package account.DTO;

    import lombok.AllArgsConstructor;
    import lombok.Data;

    @Data
    @AllArgsConstructor
    public class ChangePasswordResponse {
        private String email;
        private String status;

        public ChangePasswordResponse(String email) {
            this.email = email;
            this.status = "The password has been updated successfully";
        }
    }
  learner_created: false
- name: src/account/controller/PaymentController.java
  visible: true
  text: |
    package account.controller;

    import account.DTO.GetSalaryResponse;
    import account.DTO.SignupResponse;
    import account.config.MyException;
    import account.model.Salary;
    import account.model.User;
    import account.repository.SalaryRepository;
    import account.repository.UserRepository;

    import lombok.RequiredArgsConstructor;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.security.core.annotation.AuthenticationPrincipal;
    import org.springframework.security.core.userdetails.UserDetails;
    import org.springframework.web.bind.annotation.GetMapping;
    import org.springframework.web.bind.annotation.RequestParam;
    import org.springframework.web.bind.annotation.RestController;

    import java.util.List;
    import java.util.Objects;
    import java.util.Optional;

    @RestController
    @RequiredArgsConstructor
    public class PaymentController {
        private final UserRepository userRepository;
        private final SalaryRepository salaryRepository;
        private final String periodRegexp = "((0[1-9])|(1[0-2]))-[0-9]{4}";

        @GetMapping("/api/empl/payment")
        public ResponseEntity<Object> getOnePayment(
                @RequestParam(required = false) String period,
                @AuthenticationPrincipal UserDetails user) throws MyException {

            if (period == null) {
                return ResponseEntity.status(HttpStatus.OK)
                        .body(salaryRepository.findByUserOrderByYearDescMonthDesc((User) user).stream()
                                .map(salary -> new GetSalaryResponse(salary))
                                .toList()
                        );
            }

            if (!period.matches(periodRegexp))
                throw new MyException(HttpStatus.BAD_REQUEST, "Period '" + period + "' incorrect, ");

            Optional<Salary> optSalary = salaryRepository.findByUserAndPeriod((User) user, period);

            if (optSalary.isEmpty()) {
                return ResponseEntity.status(HttpStatus.OK).body(null);
            } else {
                return ResponseEntity.status(HttpStatus.OK)
                        .body(new GetSalaryResponse(optSalary.get()));
            }
        }

    }
  learner_created: false
- name: src/account/controller/AccountController.java
  visible: true
  text: |
    package account.controller;

    import account.DTO.PostSalaryRequest;
    import account.DTO.StatusResponse;
    import account.config.MyException;
    import account.model.Salary;
    import account.model.User;
    import account.repository.SalaryRepository;
    import account.repository.UserRepository;
    import jakarta.validation.Valid;
    import lombok.RequiredArgsConstructor;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.PostMapping;
    import org.springframework.web.bind.annotation.PutMapping;
    import org.springframework.web.bind.annotation.RequestBody;
    import org.springframework.web.bind.annotation.RestController;

    import java.util.List;
    import java.util.Optional;

    @RestController
    @RequiredArgsConstructor
    public class AccountController {
        private final UserRepository userRepository;
        private final SalaryRepository salaryRepository;

        private final String periodRegexp = "((0[1-9])|(1[0-2]))-[0-9]{4}";

        @PostMapping("/api/acct/payments")
        public ResponseEntity<StatusResponse> salary(
                @RequestBody List<@Valid PostSalaryRequest> listOfSalaries) throws MyException {

            String error = checkListOfSalaries(listOfSalaries);
            if (!error.isEmpty())
                throw new MyException(HttpStatus.BAD_REQUEST, error);

            salaryRepository.saveAll(
                    listOfSalaries.stream()
                            .map(request -> new Salary(
                                    userRepository.findByEmailIgnoreCase(request.getEmployee()).orElseThrow(),
                                    request.getPeriod(),
                                    request.getSalary()))
                            .toList()
            );

            return ResponseEntity.status(HttpStatus.OK)
                    .body(new StatusResponse("Added successfully!"));
        }

        @PutMapping("/api/acct/payments")
        public ResponseEntity<StatusResponse> updateSalary(
                @RequestBody @Valid PostSalaryRequest salaryUpdate) throws MyException {

            String error = checkOneSalaryRequestToUpdate(salaryUpdate);
            if (!error.isEmpty())
                throw new MyException(HttpStatus.BAD_REQUEST, error);

            Optional<User> optUser = userRepository.findByEmailIgnoreCase(salaryUpdate.getEmployee());
            if (optUser.isEmpty()) {
                throw new MyException(HttpStatus.BAD_REQUEST, "User '" + salaryUpdate.getEmployee() + "' does not exists, ");
            }

            User user = optUser.get();
            Salary salary = salaryRepository.findByUserAndPeriod(user, salaryUpdate.getPeriod())
                    .orElseGet(() -> new Salary(user, salaryUpdate.getPeriod(), 0L));

            salary.setSalary(salaryUpdate.getSalary());

            salaryRepository.save(salary);

            return ResponseEntity.status(HttpStatus.OK)
                    .body(new StatusResponse("Updated successfully!"));
        }

        private String checkOneSalaryRequestToUpdate(PostSalaryRequest request) {
            StringBuilder error = new StringBuilder();

            if (request.getSalary() < 0.0) error.append("Negative salary '" + request.getSalary() + "', ");

            if (!request.getPeriod().matches(periodRegexp))
                error.append("Period '" + request.getPeriod() + "' incorrect, ");

            Optional<User> optUser = userRepository.findByEmailIgnoreCase(request.getEmployee());
            if (optUser.isEmpty()) {
                error.append("User '" + request.getEmployee() + "' does not exists, ");
            } else {
                if (salaryRepository.findByUserAndPeriod(optUser.get(), request.getPeriod()).isEmpty())
                    error.append("User '" + request.getEmployee() + "' has not received salary for '" + request.getPeriod() + "' yet, ");
            }

            return error.toString();
        }

        private String checkListOfSalaries(List<PostSalaryRequest> listOfSalaries) {
            StringBuilder error = new StringBuilder();
            for (PostSalaryRequest request : listOfSalaries) {
                error.append(checkOneSalaryRequest(request));
            }
            return error.toString();
        }

        private String checkOneSalaryRequest(PostSalaryRequest request) {

            StringBuilder error = new StringBuilder();

            if (request.getSalary() < 0.0) error.append("Negative salary '" + request.getSalary() + "', ");

            if (!request.getPeriod().matches(periodRegexp))
                error.append("Period '" + request.getPeriod() + "' incorrect, ");

            Optional<User> optUser = userRepository.findByEmailIgnoreCase(request.getEmployee());
            if (optUser.isEmpty()) {
                error.append("User '" + request.getEmployee() + "' does not exists, ");
            } else {
                if (salaryRepository.findByUserAndPeriod(optUser.get(), request.getPeriod()).isPresent())
                    error.append("User '" + request.getEmployee() + "' already received salary for '" + request.getPeriod() + "', ");
            }

            return error.toString();
        }
    }
  learner_created: false
- name: src/account/model/Salary.java
  visible: true
  text: |
    package account.model;

    import account.DTO.PostSalaryRequest;
    import jakarta.persistence.*;
    import lombok.Data;
    import lombok.NoArgsConstructor;

    @Data
    @Entity
    @NoArgsConstructor
    @Table(name = "salary")
    public class Salary {
        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        private long id;

        @ManyToOne/*(fetch = FetchType.EAGER)*/
        @JoinColumn(nullable = false, name = "employee_id")
        private User user;

        private String period;

        private int month;

        private int year;

        private Long salary;

        public Salary(User user, String period, Long salary) {
            this.user = user;
            this.period = period;
            this.salary = salary;

            String[] split = period.split("-");
            this.month = Integer.parseInt(split[0]);
            this.year = Integer.parseInt(split[1]);
        }
    }
  learner_created: false
- name: src/account/DTO/PostSalaryRequest.java
  visible: true
  text: |
    package account.DTO;

    import account.model.User;
    import jakarta.validation.constraints.NotBlank;
    import jakarta.validation.constraints.NotNull;
    import lombok.Data;

    @Data
    public class PostSalaryRequest {
        @NotBlank
        private String employee;
        @NotBlank
        private String period;
        @NotNull
        private Long salary;
    }
  learner_created: false
- name: src/account/DTO/StatusResponse.java
  visible: true
  text: |
    package account.DTO;

    import lombok.AllArgsConstructor;
    import lombok.Data;
    import lombok.NoArgsConstructor;

    @Data
    @AllArgsConstructor
    public class StatusResponse {
        private String status;

    }
  learner_created: false
- name: src/account/repository/SalaryRepository.java
  visible: true
  text: |
    package account.repository;

    import account.model.Salary;
    import account.model.User;
    import org.springframework.data.repository.CrudRepository;

    import java.util.List;
    import java.util.Optional;

    public interface SalaryRepository extends CrudRepository<Salary, Long> {
        public List<Salary> findByUserOrderByYearDescMonthDesc(User user);
        public Optional<Salary> findByUserAndPeriod(User user, String period);
    }
  learner_created: false
- name: src/account/DTO/GetSalaryResponse.java
  visible: true
  text: |
    package account.DTO;

    import account.model.Salary;
    import com.fasterxml.jackson.annotation.JsonIgnore;
    import lombok.Data;

    @Data
    public class GetSalaryResponse {
        @JsonIgnore
        private final String[] months = {"January", "February", "March", "April", "May", "June",
                "July", "August", "September", "October", "November", "December"};

        private String name;
        private String lastname;
        private String period;
        private String salary;

        public GetSalaryResponse(Salary salary) {
            this.name = salary.getUser().getName();
            this.lastname = salary.getUser().getLastname();
            this.period = months[salary.getMonth() - 1] + "-" + salary.getYear();
            this.salary = "" + (salary.getSalary() / 100) + " dollar(s) " + (salary.getSalary() % 100) + " cent(s)";
        }
    }
  learner_created: false
- name: test/AccountServiceTest.java
  visible: false
  text: |-
    import account.AccountServiceApplication;
    import com.fasterxml.jackson.annotation.JsonInclude;
    import com.fasterxml.jackson.core.JsonProcessingException;
    import com.fasterxml.jackson.databind.ObjectMapper;
    import com.google.gson.JsonArray;
    import com.google.gson.JsonElement;
    import com.google.gson.JsonObject;
    import com.google.gson.JsonParser;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.UnexpectedError;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.request.HttpRequest;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.springframework.http.HttpStatus;

    import java.util.*;
    import java.util.stream.Collectors;

    import static org.hyperskill.hstest.common.JsonUtils.getJson;
    import static org.hyperskill.hstest.common.JsonUtils.getPrettyJson;
    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    class TestReq {

      private Map<String, Object> properties = new LinkedHashMap<>();

      // Deep copy
      public TestReq(TestReq another) {
        this.properties = another.properties.entrySet().stream()
                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));
      }

      public TestReq() {
      }

      public String toJson() {
        ObjectMapper mapper = new ObjectMapper();
        mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);
        try {
          return mapper.writeValueAsString(this.properties);
        } catch (JsonProcessingException e) {
          System.out.println(e.getMessage());
          return null;
        }
      }

      public TestReq setProps(String key, Object value) {
        properties.put(key, value);
        return this;
      }

    }

    public class AccountServiceTest extends SpringTest {

      private  final String signUpApi = "/api/auth/signup";
      private  final String changePassApi = "/api/auth/changepass";
      private  final String getEmployeePaymentApi = "/api/empl/payment";
      private final String postPaymentApi = "/api/acct/payments";
      private final String putRoleApi = "/api/admin/user/role";
      private final String adminApi = "/api/admin/user/";


      static String[] breachedPass= new String[]{"PasswordForJanuary", "PasswordForFebruary", "PasswordForMarch",
              "PasswordForApril", "PasswordForMay", "PasswordForJune",
              "PasswordForJuly", "PasswordForAugust", "PasswordForSeptember",
              "PasswordForOctober", "PasswordForNovember", "PasswordForDecember"};

      List<Integer> userIdList = new ArrayList<>();

      private final TestReq ivanIvanov = new TestReq().setProps("name", "Ivan")
              .setProps("lastname", "Ivanov")
              .setProps("email", "IvanIvanov@acme.com")
              .setProps("password", "rXoa4CvqpLxW");
      private final TestReq petrPetrov = new TestReq().setProps("name", "Petr")
              .setProps("lastname", "Petrov")
              .setProps("email", "PetrPetrov@acme.com")
              .setProps("password", "nWza98hjkLPE");
      private final TestReq johnDoe = new TestReq().setProps("name", "John")
              .setProps("lastname", "Doe")
              .setProps("email", "JohnDoe@acme.com")
              .setProps("password", "oMoa3VvqnLxW");
      private final TestReq maxMus = new TestReq().setProps("name", "Max")
              .setProps("lastname", "Mustermann")
              .setProps("email", "MaxMustermann@acme.com")
              .setProps("password", "ai0y9bMvyF6G");
      private final TestReq captainNemo = new TestReq().setProps("name", "Captain")
              .setProps("lastname", "Nemo")
              .setProps("email", "nautilus@pompilius.com")
              .setProps("password", "wings");
      private final TestReq ivanHoe = new TestReq().setProps("name", "Ivan")
              .setProps("lastname", "Hoe")
              .setProps("email", "IvanHoe@acme.com")
              .setProps("password", "nWza98hjkLPE");

      private final String ivanIvanovCorrectUser = ivanIvanov.toJson();
      private final String petrPetrovCorrectUser = petrPetrov.toJson();
      private final String ivanHoeCorrectUser = ivanHoe.toJson();
      private final String jDCorrectUser = johnDoe.toJson();
      private final String jDEmptyName = new TestReq(johnDoe).setProps("name", "").toJson();
      private final String jDNoName = new TestReq(johnDoe).setProps("name", null).toJson();
      private final String jDEmptyLastName = new TestReq(johnDoe).setProps("lastname", "").toJson();
      private final String jDNoLastName = new TestReq(johnDoe).setProps("lastname", null).toJson();
      private final String jDEmptyEmail = new TestReq(johnDoe).setProps("email", "").toJson();
      private final String jDNoEmail = new TestReq(johnDoe).setProps("email", null).toJson();
      private final String jDEmptyPassword = new TestReq(johnDoe).setProps("password", "").toJson();
      private final String jDNoPassword = new TestReq(johnDoe).setProps("password", null).toJson();
      private final String jDWrongEmail1 = new TestReq(johnDoe).setProps("email", "johndoeacme.com").toJson();
      private final String jDWrongEmail2 = new TestReq(johnDoe).setProps("email", "johndoe@google.com").toJson();
      private final String maxMusCorrectUser = maxMus.toJson();
      private final String jDLower = new TestReq(johnDoe).setProps("email", "johndoe@acme.com").toJson();
      private final String maxMusLower = new TestReq(maxMus).setProps("email", "maxmustermann@acme.com").toJson();
      private final String jDWrongPassword = new TestReq(johnDoe).setProps("password", "none").toJson();
      private final String maxMusWrongPassword = new TestReq(maxMus).setProps("password", "none").toJson();
      private final String maxMusWrongEmail = new TestReq(maxMus).setProps("email", "maxmustermann@google.com").toJson();
      private final String captainNemoWrongUser = captainNemo.toJson();
      private final String jDNewPass = new TestReq(johnDoe).setProps("password", "aNob5VvqzRtb").toJson();

      private final String jDDuplicatePass = new TestReq().setProps("new_password", "oMoa3VvqnLxW").toJson();
      private final String jDShortPass = new TestReq().setProps("new_password", "oMoa3Vvqn").toJson();
      private final String jDPass = new TestReq().setProps("new_password", "aNob5VvqzRtb").toJson();

      private String paymentsList = convert(new String[]{
              new TestReq().setProps("employee", "ivanivanov@acme.com").setProps("period", "01-2021")
                      .setProps("salary", 654321).toJson(),
              new TestReq().setProps("employee", "ivanivanov@acme.com").setProps("period", "02-2021")
                      .setProps("salary", 987).toJson(),
              new TestReq().setProps("employee", "ivanivanov@acme.com").setProps("period", "03-2021")
                      .setProps("salary", 21).toJson(),
              new TestReq().setProps("employee", "maxmustermann@acme.com").setProps("period", "01-2021")
                      .setProps("salary", 123456).toJson(),
              new TestReq().setProps("employee", "maxmustermann@acme.com").setProps("period", "02-2021")
                      .setProps("salary", 456789).toJson(),
              new TestReq().setProps("employee", "maxmustermann@acme.com").setProps("period", "03-2021")
                      .setProps("salary", 12).toJson()
      });
      private final String wrongPaymentListData = convert(new String[]{new TestReq().setProps("employee", "maxmustermann@acme.com")
              .setProps("period", "13-2021").setProps("salary", 123456).toJson()});
      private  String wrongPaymentListSalary = convert(new String[]{new TestReq().setProps("employee", "johndoe@acme.com")
              .setProps("period", "11-2022").setProps("salary", -1).toJson()});
      private final String wrongPaymentListDuplicate = convert(new String[]{
              new TestReq().setProps("employee", "maxmustermann@acme.com").setProps("period", "01-2021")
                      .setProps("salary", 123456).toJson(),
              new TestReq().setProps("employee", "maxmustermann@acme.com").setProps("period", "01-2021")
                      .setProps("salary", 456789).toJson()
      });
      private final String updatePayment = new TestReq().setProps("employee", "maxmustermann@acme.com").setProps("period", "01-2021")
              .setProps("salary", 77777).toJson();
      private final String updatePaymentResponse = new TestReq().setProps("name", "Max").setProps("lastname", "Mustermann")
              .setProps("period", "January-2021").setProps("salary", "777 dollar(s) 77 cent(s)").toJson();
      private final String updatePaymentWrongDate = new TestReq().setProps("employee", "maxmustermann@acme.com")
              .setProps("period", "13-2021").setProps("salary", 1234567).toJson();
      private final String updatePaymentWrongSalary = new TestReq().setProps("employee", "maxmustermann@acme.com")
              .setProps("period", "11-2022").setProps("salary", -1).toJson();
      private final String correctPaymentResponse = convert(new String[]{
              new TestReq().setProps("name", "Max").setProps("lastname", "Mustermann")
                      .setProps("period", "March-2021").setProps("salary", "0 dollar(s) 12 cent(s)").toJson(),
              new TestReq().setProps("name", "Max").setProps("lastname", "Mustermann")
                      .setProps("period", "February-2021").setProps("salary", "4567 dollar(s) 89 cent(s)").toJson(),
              new TestReq().setProps("name", "Max").setProps("lastname", "Mustermann")
                      .setProps("period", "January-2021").setProps("salary", "1234 dollar(s) 56 cent(s)").toJson()
      });
      private final String correctPaymentResponseIvanov = convert(new String[]{
              new TestReq().setProps("name", "Ivan").setProps("lastname", "Ivanov")
                      .setProps("period", "March-2021").setProps("salary", "0 dollar(s) 21 cent(s)").toJson(),
              new TestReq().setProps("name", "Ivan").setProps("lastname", "Ivanov")
                      .setProps("period", "February-2021").setProps("salary", "9 dollar(s) 87 cent(s)").toJson(),
              new TestReq().setProps("name", "Ivan").setProps("lastname", "Ivanov")
                      .setProps("period", "January-2021").setProps("salary", "6543 dollar(s) 21 cent(s)").toJson()
      });
      private final String firstResponseAdminApi = convert(new String[]{
              new TestReq().setProps("id", 1).setProps("name", "John").setProps("lastname", "Doe")
                      .setProps("email", "johndoe@acme.com").setProps("roles", new String[] {"ROLE_ADMINISTRATOR"}).toJson(),
              new TestReq().setProps("id", 2).setProps("name", "Max").setProps("lastname", "Mustermann")
                      .setProps("email", "maxmustermann@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson(),
              new TestReq().setProps("id", 3).setProps("name", "Ivan").setProps("lastname", "Ivanov")
                      .setProps("email", "ivanivanov@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson(),
              new TestReq().setProps("id", 4).setProps("name", "Petr").setProps("lastname", "Petrov")
                      .setProps("email", "petrpetrov@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson()
      });
      private final String secondResponseAdminApi = convert(new String[]{
              new TestReq().setProps("id", 1).setProps("name", "John").setProps("lastname", "Doe")
                      .setProps("email", "johndoe@acme.com").setProps("roles", new String[] {"ROLE_ADMINISTRATOR"}).toJson(),
              new TestReq().setProps("id", 2).setProps("name", "Max").setProps("lastname", "Mustermann")
                      .setProps("email", "maxmustermann@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson(),
              new TestReq().setProps("id", 3).setProps("name", "Ivan").setProps("lastname", "Ivanov")
                      .setProps("email", "ivanivanov@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson()
      });
      private final String thirdResponseAdminApi = convert(new String[]{
              new TestReq().setProps("id", 1).setProps("name", "John").setProps("lastname", "Doe")
                      .setProps("email", "johndoe@acme.com").setProps("roles", new String[] {"ROLE_ADMINISTRATOR"}).toJson(),
              new TestReq().setProps("id", 2).setProps("name", "Max").setProps("lastname", "Mustermann")
                      .setProps("email", "maxmustermann@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson(),
              new TestReq().setProps("id", 3).setProps("name", "Ivan").setProps("lastname", "Ivanov")
                      .setProps("email", "ivanivanov@acme.com").
                      setProps("roles", new String[] {"ROLE_ACCOUNTANT", "ROLE_USER"}).toJson()
      });
      private final String fourthResponseAdminApi = convert(new String[]{
              new TestReq().setProps("id", 1).setProps("name", "John").setProps("lastname", "Doe")
                      .setProps("email", "johndoe@acme.com").setProps("roles", new String[] {"ROLE_ADMINISTRATOR"}).toJson(),
              new TestReq().setProps("id", 2).setProps("name", "Max").setProps("lastname", "Mustermann")
                      .setProps("email", "maxmustermann@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson(),
              new TestReq().setProps("id", 3).setProps("name", "Ivan").setProps("lastname", "Ivanov")
                      .setProps("email", "ivanivanov@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson(),
              new TestReq().setProps("id", 4).setProps("name", "Ivan").setProps("lastname", "Hoe")
                      .setProps("email", "ivanhoe@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson()
      });

      public AccountServiceTest() {
        super(AccountServiceApplication.class, "../service_db.mv.db");
      }

      private String convert(String[] trs) {
        JsonArray  jsonArray = new JsonArray();
        for (String tr : trs) {
          JsonElement jsonObject = JsonParser.parseString(tr);
          jsonArray.add(jsonObject);
        }
        return jsonArray.toString();
      }


      CheckResult testApi(String user, String body, int status, String api, String method, String message) {

        HttpResponse response = checkResponseStatus(user, body, status, api, method, message);

        return CheckResult.correct();
      }

      /**
       * Method for checking response on Post request for signup API
       *
       * @param body string representation of body content in JSON format (String)
       * @param status required http status for response (int)
       * @return instance of CheckResult class containing result of checks (CheckResult)
       */
      CheckResult testPostSignUpResponse(String body, int status, String[] role) {

        HttpResponse response = checkResponseStatus(null, body, status, signUpApi, "POST", "");

        JsonObject rightResponse = getJson(body).getAsJsonObject();
        rightResponse.remove("password");

        // Check is it JSON in response or something else
        if (!response.getJson().isJsonObject()) {
          return CheckResult.wrong("Wrong object in response, expected JSON but was \n" +
                  response.getContent().getClass());

        }

        JsonObject jsonResponse = response.getJson().getAsJsonObject();

        // Check if password is presence in response
        if (jsonResponse.get("password") != null) {
          return CheckResult.wrong("You must remove password from response\n" +
                  jsonResponse);
        }

        if (jsonResponse.get("id") == null) {
          return CheckResult.wrong("Response must contain user ID\n" +
                  "Received response:\n" +
                  jsonResponse);
        }


        // Check JSON in response
        expect(response.getContent()).asJson().check(
                isObject()
                        .value("id", isInteger())
                        .value("name", rightResponse.get("name").getAsString())
                        .value("lastname", rightResponse.get("lastname").getAsString())
                        .value("email", isString(s -> s.equalsIgnoreCase(rightResponse.get("email").getAsString())))
                        .value("roles", role));

        if (userIdList.contains(jsonResponse.get("id").getAsInt())) {
          return CheckResult.wrong("User ID must be unique!\n" +
                  "Received response:\n" +
                  jsonResponse);
        }


        userIdList.add(jsonResponse.get("id").getAsInt());
        return CheckResult.correct();
      }

      /**
       * Method for check the prohibition of requests specified types
       *
       * @param api testing api (String)
       * @param deniedMethods list of prohibited type requests
       * @param body string representation of body content in JSON format (String)
       * @return instance of CheckResult class containing result of checks (CheckResult)
       */
      CheckResult testDeniedMethods(String api, List<String> deniedMethods, String body) {

        HttpRequest getReq = get(api);
        HttpRequest postReq = post(api, body);
        HttpRequest putReq = put(api, body);
        HttpRequest deleteReq = delete(api);

        Map<String, HttpRequest> methodsMap = new LinkedHashMap<String,  HttpRequest>() {{
          put("get", getReq);
          put("post", postReq);
          put("put", putReq);
          put("delete", deleteReq);
        }};

        for (Map.Entry<String, HttpRequest> entry : methodsMap.entrySet()) {
          if (deniedMethods.contains(entry.getKey())) {
            HttpResponse response = entry.getValue().send();
            if (response.getStatusCode() != 405) {
              return CheckResult.wrong("Method " + entry.getKey().toUpperCase() + " is not allowed for " + api + " status code should be " +
                      "405, responded: " + response.getStatusCode());
            }
          }
        }
        return CheckResult.correct();
      }

      /**
       * Method for restarting application
       *
       */
      private CheckResult restartApplication() {
        try {
          reloadSpring();
        } catch (Exception ex) {
          throw new UnexpectedError(ex.getMessage());
        }
        return CheckResult.correct();
      }

      /**
       * Method for checking authentication
       *
       * @param user string representation of user information in JSON format (String)
       * @param status required http status for response (int)
       * @param message hint about reason of error (String)
       * @return instance of CheckResult class containing result of checks (CheckResult)
       */
      private CheckResult testUserRegistration(String user, int status, String message) {

        HttpResponse response = checkResponseStatus(user, "", status, getEmployeePaymentApi, "GET", message);

        return CheckResult.correct();
      }

      CheckResult testChangePassword(String api, String body, int status, String user) {
        JsonObject userJson = getJson(user).getAsJsonObject();

        HttpResponse response = checkResponseStatus(user, body, status, api, "POST", "");

        // Check JSON in response
        if (status == 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("email", userJson.get("email").getAsString().toLowerCase())
                          .value("status", "The password has been updated successfully"));
        }
        return CheckResult.correct();
      }

      /**
       * Method for testing duplicate users
       *
       * @param user string representation of user information in JSON format (String)
       * @return instance of CheckResult class containing result of checks (CheckResult)
       */
      private CheckResult testUserDuplicates(String user) {
        HttpResponse response = post(signUpApi, user).send();
        // Check error message field in JSON response
        expect(response.getContent()).asJson().check(
                isObject()
                        .value("status", 400)
                        .value("error", "Bad Request")
                        .value("message", "User exist!")
                        .anyOtherValues());
        return CheckResult.correct();
      }

      private CheckResult testBreachedPass(String api, String login, String password, String body, String message) {
        JsonObject json = getJson(body).getAsJsonObject();
        HttpResponse response;
        for (int index = 0; index < breachedPass.length; index++) {
          if (json.has("password")) {
            json.remove("password");
            json.addProperty("password", breachedPass[index]);
          } else if (json.has("new_password")) {
            json.remove("new_password");
            json.addProperty("new_password", breachedPass[index]);
          }
          if (login.isEmpty() || password.isEmpty()) {
            response = post(api, json.toString()).send();
          } else {
            response = post(api, json.toString()).basicAuth(login, password).send();
          }

          if (response.getStatusCode() != 400) {
            return CheckResult.wrong("POST " + api + " should respond with "
                    + "status code 400 , responded: " + response.getStatusCode() + "\n"
                    + "Response body:\n" + response.getContent() + "\n"
                    + "Request body:\n" + json.toString() + "\n"
                    + message);
          }
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("status", 400)
                          .value("error", "Bad Request")
                          .value("message", "The password is in the hacker's database!")
                          .anyOtherValues());

        }
        return CheckResult.correct();
      }


      CheckResult testPostPaymentResponse(String user, String body, int status, String message) {

        HttpResponse response = checkResponseStatus(user, body, status, postPaymentApi, "POST", message);

        // Check JSON in response
        if (response.getStatusCode() == 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("status", "Added successfully!")
                          .anyOtherValues());
        }
        if (response.getStatusCode() == 400) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("error", "Bad Request")
                          .value("path", "/api/acct/payments")
                          .value("status", 400)
                          .anyOtherValues());
        }
        return CheckResult.correct();
      }

      CheckResult testPutPaymentResponse(String user, String body, int status, String message) {

        HttpResponse response = checkResponseStatus(user, body, status, postPaymentApi, "PUT", message);

        // Check JSON in response
        if (response.getStatusCode() == 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("status", "Updated successfully!")
                          .anyOtherValues());
        }
        if (response.getStatusCode() == 400) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("error", "Bad Request")
                          .value("path", "/api/acct/payments")
                          .value("status", 400)
                          .anyOtherValues());
        }
        return CheckResult.correct();
      }

      CheckResult testGetPaymentResponse(String user, int status, String correctResponse, String message) {

        HttpResponse response = checkResponseStatus(user, "", status, getEmployeePaymentApi , "GET", message);

        JsonArray correctJson = getJson(correctResponse).getAsJsonArray();
        JsonArray responseJson = getJson(response.getContent()).getAsJsonArray();

        // Check is it array of JSON in response or something else
        if (!response.getJson().isJsonArray()) {
          return CheckResult.wrong("Wrong object in response, expected array of JSON but was \n" +
                  response.getContent().getClass());
        }

        if (responseJson.size() == 0)  {
          return CheckResult.wrong("No data in response body" + "\n"
                  + "in response " + getPrettyJson(responseJson)  + "\n"
                  + "must be " + getPrettyJson(correctJson));
        }

        if (correctJson.size() != responseJson.size()) {
          return CheckResult.wrong("New data should not be added" + "\n"
                  + "in response " + getPrettyJson(responseJson)  + "\n"
                  + "must be " + getPrettyJson(correctJson));
        }

        // Check JSON in response
        if (response.getStatusCode() == 200) {
          for (int i = 0; i < responseJson.size(); i++) {
            if (!responseJson.get(i).equals(correctJson.get(i))) {
              return CheckResult.wrong("Get " + getEmployeePaymentApi  +" wrong data in response body" + "\n"
                      + "in response " + getPrettyJson(responseJson) + "\n"
                      + "must be " + getPrettyJson(correctJson));
            }
          }
        }
        return CheckResult.correct();
      }

      CheckResult testGetPaymentResponseParam(String user, int status, String request, String correctResponse, String message) {
        JsonObject userJson = getJson(user).getAsJsonObject();
        String password = userJson.get("password").getAsString();
        String login = userJson.get("email").getAsString().toLowerCase();
        JsonObject json = getJson(correctResponse).getAsJsonObject();
        JsonObject jsonRequest = getJson(request).getAsJsonObject();
        String param = jsonRequest.get("period").getAsString();
        HttpResponse response = get(getEmployeePaymentApi).addParam("period", param).basicAuth(login, password).send();
        if (response.getStatusCode() != status) {
          throw new WrongAnswer("GET" + " " + getEmployeePaymentApi + "?" + param + " should respond with "
                  + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                  + message + "\n"
                  + "Response body:\n" + response.getContent() + "\n");
        }
        // Check JSON in response
        if (response.getStatusCode() == 200) {
          if (!response.getJson().equals(json)) {
            return CheckResult.wrong("Get " + getEmployeePaymentApi  + "?period=" + param
                    + " wrong data in response body" + "\n"
                    + "in response " + getPrettyJson(response.getJson()) + "\n"
                    + "must be " + getPrettyJson(json));
          }
        }

        if (response.getStatusCode() == 400) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("error", "Bad Request")
                          .value("path", "/api/empl/payment")
                          .value("status", 400)
                          .anyOtherValues());
        }
        return CheckResult.correct();
      }

      private CheckResult testGetAdminApi(String api, int status, String user, String answer, String message) {

        HttpResponse response = checkResponseStatus(user, "", status, api, "GET", message);

        // Check is it array of JSON in response or something else
        if (!response.getJson().isJsonArray()) {
          return CheckResult.wrong("Wrong object in response, expected array of JSON but was \n" +
                  response.getContent().getClass());
        }

        JsonArray correctJson = getJson(answer).getAsJsonArray();
        JsonArray responseJson = getJson(response.getContent()).getAsJsonArray();


        if (responseJson.size() == 0)  {
          return CheckResult.wrong("No data in response body" + "\n"
                  + "in response " + getPrettyJson(responseJson)  + "\n"
                  + "must be " + getPrettyJson(correctJson));
        }

        if (responseJson.size() != correctJson.size())  {
          return CheckResult.wrong("Wrong dataa in response body" + "\n"
                  + "in response " + getPrettyJson(responseJson)  + "\n"
                  + "must be " + getPrettyJson(correctJson));
        }


        // Check JSON in response
        if (response.getStatusCode() == 200) {
          for (int i = 0; i < responseJson.size(); i++) {
            String[] roles = new String[correctJson.get(i).getAsJsonObject().getAsJsonArray("roles").size()];
            for(int j=0; j<correctJson.get(i).getAsJsonObject().getAsJsonArray("roles").size(); j++) {
              roles[j]=correctJson.get(i).getAsJsonObject().getAsJsonArray("roles").get(j).getAsString();
            }
            expect(responseJson.get(i).getAsJsonObject().toString()).asJson()
                    .check(isObject()
                            .value("id", isInteger())
                            .value("name", correctJson.get(i).getAsJsonObject().get("name").getAsString())
                            .value("lastname", correctJson.get(i).getAsJsonObject().get("lastname").getAsString())
                            .value("email", correctJson.get(i).getAsJsonObject().get("email").getAsString())
                            .value("roles", isArray( roles )));
          }
        }
        return CheckResult.correct();
      }


      CheckResult testDeleteAdminApi(String api, HttpStatus status, String user, String param,
                                     String answer, String message) {

        HttpResponse response = checkResponseStatus(user, "", status.value(),
                api + param, "DELETE", message);

        // Check JSON in response
        if (response.getStatusCode() == 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("user", param.toLowerCase())
                          .value("status", answer));
        }

        if (response.getStatusCode() != 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("error", status.getReasonPhrase())
                          .value("path", api + param)
                          .value("status", status.value())
                          .value("message", answer)
                          .anyOtherValues());
        }
        return CheckResult.correct();
      }

      CheckResult testPutAdminApi(String api, HttpStatus status, String user, String reqUser,
                                  String role, String operation, String[] respRoles, String message) {

        JsonObject jsonUser = getJson(reqUser).getAsJsonObject();
        JsonObject request = new JsonObject();
        request.addProperty("user", jsonUser.get("email").getAsString());
        request.addProperty("operation", operation);
        request.addProperty("role", role);

        HttpResponse response = checkResponseStatus(user, request.toString(), status.value(), api, "PUT", message);

        // Check JSON in response
        if (response.getStatusCode() == 200) {
          expect(response.getContent()).asJson()
                  .check(isObject()
                          .value("id", isInteger())
                          .value("name", jsonUser.get("name").getAsString())
                          .value("lastname", jsonUser.get("lastname").getAsString())
                          .value("email", jsonUser.get("email").getAsString().toLowerCase())
                          .value("roles", isArray(respRoles)));
        }

        if (response.getStatusCode() != 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("error", status.getReasonPhrase())
                          .value("path", api)
                          .value("status", status.value())
                          .value("message", respRoles[0])
                          .anyOtherValues());
        }
        return CheckResult.correct();
      }

      CheckResult testRoleModelNegative(String api, String method, HttpStatus status, String user, String body, String message) {

        HttpResponse response = checkResponseStatus(user, body, status.value(), api, method.toUpperCase(), message);

        // Check JSON in response
        if (response.getStatusCode() != 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("error", status.getReasonPhrase())
                          .value("path", api)
                          .value("status", status.value())
                          .value("message", "Access Denied!")
                          .anyOtherValues());
        }
        return CheckResult.correct();
      }

      /**
       * Method for testing api response
       *
       * @param user string representation of user information in JSON format (String)
       * @param body request body (String)
       * @param status expected response status (int)
       * @param api testing api (String)
       * @param method method for api (String)
       * @param message test hints for student (String)
       * @return response (HttpResponse)
       */
      private HttpResponse checkResponseStatus(String user, String body,
                                               int status, String api, String method, String message) {
        HttpRequest request = null;
        switch (method) {
          case "GET":
            request = get(api);
            break;
          case "POST":
            request = post(api, body);
            break;
          case "PUT":
            request = put(api, body);
            break;
          case "DELETE":
            request = delete(api);
            break;
        }

        if (user != null) {
          JsonObject userJson = getJson(user).getAsJsonObject();
          String password = userJson.get("password").getAsString();
          String login = userJson.get("email").getAsString().toLowerCase();
          request = request.basicAuth(login, password);
        }
        HttpResponse response = request.send();

        if (response.getStatusCode() != status) {
          throw new WrongAnswer(method + " " + api  + " should respond with "
                  + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                  + message + "\n"
                  + "Response body:\n" + response.getContent() + "\n");
        }
        return response;
      }

      @DynamicTest
      DynamicTesting[] dt = new DynamicTesting[] {

              // Testing user registration negative tests
              () -> testApi(null, jDEmptyName, 400, signUpApi, "POST", "Empty name field!"), // 1
              () -> testApi(null, jDNoName, 400, signUpApi, "POST", "Name field is absent!"), // 2
              () -> testApi(null, jDEmptyLastName, 400, signUpApi, "POST", "Empty lastname field!"), // 3
              () -> testApi(null, jDNoLastName, 400, signUpApi, "POST", "Lastname field is absent!"), // 4
              () -> testApi(null, jDEmptyEmail, 400, signUpApi, "POST", "Empty email field!"), // 5
              () -> testApi(null, jDNoEmail, 400, signUpApi, "POST", "Email field is absent!"), // 6
              () -> testApi(null, jDEmptyPassword, 400, signUpApi, "POST", "Empty password field!"), // 7
              () -> testApi(null, jDNoPassword, 400, signUpApi, "POST", "Password field is absent!"),// 8
              () -> testApi(null, jDWrongEmail1, 400, signUpApi, "POST", "Wrong email!"), // 9
              () -> testApi(null, jDWrongEmail2, 400, signUpApi, "POST", "Wrong email!"), // 10
              () -> testBreachedPass(signUpApi, "", "", jDCorrectUser,
                      "Sending password from breached list"), // 11

              // Testing user registration positive tests
              () -> testPostSignUpResponse(jDCorrectUser, 200, new String[] {"ROLE_ADMINISTRATOR"}), // 12
              () -> testPostSignUpResponse(maxMusLower, 200, new String[] {"ROLE_USER"}), // 13
              () -> testPostSignUpResponse(ivanIvanovCorrectUser, 200, new String[] {"ROLE_USER"}), // 14
              () -> testPostSignUpResponse(petrPetrovCorrectUser, 200, new String[] {"ROLE_USER"}), // 15

    //          // Testing user registration negative tests
              () -> testApi(null, jDCorrectUser, 400, signUpApi, "POST", "User must be unique!"), // 16
              () -> testUserDuplicates(jDCorrectUser), // 17
              () -> testApi(null, jDLower, 400, signUpApi, "POST",
                      "User must be unique (ignorecase)!"), // 18

    //
    //          // Test authentication, positive tests
              () -> testUserRegistration(maxMusLower, 200, "User must login!"), // 19
              () -> testUserRegistration(maxMusCorrectUser, 200, "Login case insensitive!"), // 20
    //
    //          // Test authentication, negative tests
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 21
              () -> testUserRegistration(maxMusWrongEmail, 401, "Wrong password!"), // 22
              () -> testUserRegistration(captainNemoWrongUser, 401, "Wrong user"), // 23
              () -> testApi(null, "", 401, getEmployeePaymentApi, "GET",
                      "This api only for authenticated user"), // 24
    //
    //          // Testing changing password
              () -> testApi(null, jDDuplicatePass, 401, changePassApi, "POST",
                      "This api only for authenticated user"), // 25
              () -> testApi(jDCorrectUser, jDShortPass, 400, changePassApi, "POST",
                      "The password length must be at least 12 chars!"), // 26
              () -> testApi(jDCorrectUser, jDDuplicatePass, 400, changePassApi, "POST",
                      "The passwords must be different!"), // 27
              () -> testBreachedPass(changePassApi, "JohnDoe@acme.com", "oMoa3VvqnLxW",
                      jDDuplicatePass, "Sending password from breached list"), // 28
              () -> testChangePassword(changePassApi, jDPass, 200, jDCorrectUser), // 29
              () -> testApi(jDCorrectUser, "", 401, adminApi, "GET",
                      "Password must be changed!"), // 30
              () -> testApi(jDNewPass, "", 200, adminApi, "GET",
                      "Password must be changed!"), // 31

              // Testing persistence
              () -> restartApplication(), // 32
              () -> testUserRegistration(maxMusCorrectUser, 200, "User must login, after restarting!" +
                      " Check persistence."), // 33

              // Testing admin functions
              // Delete user
              () -> testApi(maxMusCorrectUser, "", 403, "/api/admin/user/", "DELETE",
                      "Api must be available only to admin user"), // 34
              () -> testApi(maxMusCorrectUser, "", 403, "/api/admin/user/johndoe@acme.com", "DELETE",
                      "Api must be available only to admin user"), // 35
              () -> testGetAdminApi("/api/admin/user/", 200, jDNewPass,
                      firstResponseAdminApi, "Api must be available to admin user"), // 36
              () -> testDeleteAdminApi("/api/admin/user/", HttpStatus.OK, jDNewPass,
                      "petrpetrov@acme.com", "Deleted successfully!", "Trying to delete user"), // 37
              () -> testGetAdminApi("/api/admin/user/", 200, jDNewPass,
                      secondResponseAdminApi, "User must be deleted!"), // 38
              () -> testDeleteAdminApi("/api/admin/user/", HttpStatus.BAD_REQUEST,
                      jDNewPass, "johndoe@acme.com",
                      "Can't remove ADMINISTRATOR role!", "Trying to delete admin"), // 39
              () -> testDeleteAdminApi("/api/admin/user/", HttpStatus.NOT_FOUND,
                      jDNewPass, "johndoe@goole.com",
                      "User not found!", "Trying to delete non existing user"), // 40
              () -> testPostSignUpResponse(ivanHoeCorrectUser, 200, new String[] {"ROLE_USER"}), // 41
              () -> testUserRegistration(ivanHoeCorrectUser, 200, "User \"ivanhoe@acme.com\" must be added!"), // 42
              () -> testGetAdminApi("/api/admin/user/", 200, jDNewPass,
                      fourthResponseAdminApi, "User \"ivanhoe@acme.com\" must be added!"), // 43
              () -> testDeleteAdminApi("/api/admin/user/", HttpStatus.OK, jDNewPass,
                      "ivanhoe@acme.com", "Deleted successfully!", "Trying to delete user \"ivanhoe@acme.com\""), // 44

              // Testing persistence
              () -> restartApplication(), // 45
              () -> testGetAdminApi("/api/admin/user/", 200, jDNewPass,
                      secondResponseAdminApi, "User must be deleted!"), // 46



              // Changing roles
              () -> testPutAdminApi(putRoleApi, HttpStatus.OK, jDNewPass,
                      ivanIvanovCorrectUser, "ACCOUNTANT", "GRANT",
                      new String[] {"ROLE_ACCOUNTANT", "ROLE_USER"}, ""), // 47
              () -> testGetAdminApi("/api/admin/user/", 200, jDNewPass,
                      thirdResponseAdminApi, "Role must be changed!"), // 48
              () -> testPutAdminApi(putRoleApi, HttpStatus.OK, jDNewPass,
                      ivanIvanovCorrectUser, "ACCOUNTANT", "REMOVE",
                      new String[] {"ROLE_USER"}, ""),
              () -> testGetAdminApi("/api/admin/user/", 200, jDNewPass,
                      secondResponseAdminApi, "Role must be changed!"),
              () -> testPutAdminApi(putRoleApi, HttpStatus.OK, jDNewPass,
                      ivanIvanovCorrectUser, "ACCOUNTANT", "GRANT",
                      new String[] {"ROLE_ACCOUNTANT", "ROLE_USER"}, ""),

              // Testing admin functions, negative tests
              () -> testPutAdminApi(putRoleApi, HttpStatus.NOT_FOUND, jDNewPass,
                      ivanIvanovCorrectUser, "NEW_ROLE", "GRANT",
                      new String[] {"Role not found!"}, "Trying add not existing role!"),
              () -> testPutAdminApi(putRoleApi, HttpStatus.BAD_REQUEST, jDNewPass,
                      ivanIvanovCorrectUser, "ADMINISTRATOR", "GRANT",
                      new String[] {"The user cannot combine administrative and business roles!"},
                      "Trying add administrative role to business user!"),
              () -> testPutAdminApi(putRoleApi, HttpStatus.BAD_REQUEST, jDNewPass,
                      jDNewPass, "USER", "GRANT",
                      new String[] {"The user cannot combine administrative and business roles!"},
                      "Trying add business role to administrator!"),
              () -> testPutAdminApi(putRoleApi, HttpStatus.BAD_REQUEST, jDNewPass,
                      jDNewPass, "ADMINISTRATOR", "REMOVE",
                      new String[] {"Can't remove ADMINISTRATOR role!"}, "Trying remove administrator role!"),
              () -> testPutAdminApi(putRoleApi, HttpStatus.BAD_REQUEST, jDNewPass,
                      maxMusCorrectUser, "USER", "REMOVE",
                      new String[] {"The user must have at least one role!"}, "Trying remove single role!"),
              () -> testPutAdminApi(putRoleApi, HttpStatus.BAD_REQUEST, jDNewPass,
                      maxMusCorrectUser, "ACCOUNTANT", "REMOVE",
                      new String[] {"The user does not have a role!"}, "Trying remove not granted role!"),
              () -> testPutAdminApi(putRoleApi, HttpStatus.NOT_FOUND, jDNewPass,
                      captainNemoWrongUser, "ACCOUNTANT", "REMOVE",
                      new String[] {"User not found!"}, "Trying remove role from non existing user!"),

              // Testing role model negative case
              () -> testRoleModelNegative(putRoleApi, "PUT", HttpStatus.FORBIDDEN, ivanIvanovCorrectUser,
                      "", "Trying to access administrative endpoint with business user"),
              () -> testRoleModelNegative("/api/admin/user/", "GET", HttpStatus.FORBIDDEN, ivanIvanovCorrectUser,
                      "", "Trying to access administrative endpoint with business user"),
              () -> testRoleModelNegative("/api/admin/user", "DELETE", HttpStatus.FORBIDDEN, ivanIvanovCorrectUser,
                      "", "Trying to access administrative endpoint with business user"),
              () -> testRoleModelNegative(postPaymentApi, "POST", HttpStatus.FORBIDDEN, jDNewPass,
                      "", "Trying to access business endpoint with administrative user"),
              () -> testRoleModelNegative(postPaymentApi, "POST", HttpStatus.FORBIDDEN, maxMusCorrectUser,
                      "", "Trying to access endpoint with wrong role"),
              () -> testRoleModelNegative(getEmployeePaymentApi, "GET", HttpStatus.FORBIDDEN, jDNewPass,
                      "", "Trying to access business endpoint with administrative user"),

              // Testing business logic
              () -> testPostPaymentResponse(ivanIvanovCorrectUser, paymentsList, 200, "Payment list must be added"),
              () -> testGetPaymentResponse(maxMusCorrectUser, 200, correctPaymentResponse,
                      "Wrong status code!"),
              () -> testGetPaymentResponse(ivanIvanovCorrectUser, 200, correctPaymentResponseIvanov,
                      "Wrong status code!"),
              () -> testPostPaymentResponse(ivanIvanovCorrectUser, wrongPaymentListSalary, 400, "Wrong salary in payment list"),
              () -> testGetPaymentResponse(maxMusCorrectUser, 200, correctPaymentResponse,
                      "Wrong status code!"),
              () -> testPostPaymentResponse(ivanIvanovCorrectUser, wrongPaymentListData, 400, "Wrong data in payment list"),
              () -> testGetPaymentResponse(maxMusCorrectUser, 200, correctPaymentResponse,
                      "Wrong status code!"),
              () -> testPostPaymentResponse(ivanIvanovCorrectUser, wrongPaymentListDuplicate, 400, "Duplicated entry in payment list"),
              () -> testGetPaymentResponse(maxMusCorrectUser, 200, correctPaymentResponse,
                      "Wrong status code!"),
              () -> testPutPaymentResponse(ivanIvanovCorrectUser, updatePaymentWrongDate, 400,"Wrong date in request body!"),
              () -> testPutPaymentResponse(ivanIvanovCorrectUser, updatePaymentWrongSalary, 400, "Wrong salary in request body!"),
              () -> testPutPaymentResponse(ivanIvanovCorrectUser, updatePayment, 200, "Salary must be update!"),
              () -> testGetPaymentResponseParam(maxMusCorrectUser, 200, updatePayment, updatePaymentResponse,
                      "Salary must be update!"),
              () -> testGetPaymentResponseParam(maxMusCorrectUser, 400, updatePaymentWrongDate, updatePaymentResponse,
                      "Wrong date in request!"),
      };

    }
  learner_created: false
- name: src/account/model/Role.java
  visible: true
  learner_created: true
- name: src/account/config/AppConfig.java
  visible: true
  learner_created: true
- name: src/account/repository/RoleRepository.java
  visible: true
  learner_created: true
- name: src/account/service/RoleCache.java
  visible: true
  learner_created: true
- name: src/account/controller/AdminController.java
  visible: true
  learner_created: true
- name: src/account/DTO/UserStatusResponse.java
  visible: true
  learner_created: true
- name: src/account/DTO/ChangeRoleRequest.java
  visible: true
  learner_created: true
- name: src/account/config/CustomAccessDeniedHandler.java
  visible: true
  learner_created: true
- name: src/account/config/CustomAuthenticationFailureHandler.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/16605#comment
status: Solved
record: 5
